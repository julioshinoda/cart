// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/julioshinoda/cart/entity"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddCoupon provides a mock function with given fields: ID, coupon
func (_m *UseCase) AddCoupon(ID string, coupon entity.Coupon) error {
	ret := _m.Called(ID, coupon)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.Coupon) error); ok {
		r0 = rf(ID, coupon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddItem provides a mock function with given fields: id, item
func (_m *UseCase) AddItem(id string, item entity.Items) (*entity.Cart, error) {
	ret := _m.Called(id, item)

	var r0 *entity.Cart
	if rf, ok := ret.Get(0).(func(string, entity.Items) *entity.Cart); ok {
		r0 = rf(id, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, entity.Items) error); ok {
		r1 = rf(id, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearCart provides a mock function with given fields: ID
func (_m *UseCase) ClearCart(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: id
func (_m *UseCase) GetCart(id string) (*entity.Cart, error) {
	ret := _m.Called(id)

	var r0 *entity.Cart
	if rf, ok := ret.Get(0).(func(string) *entity.Cart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: ID, itemID
func (_m *UseCase) RemoveItem(ID string, itemID string) error {
	ret := _m.Called(ID, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCart provides a mock function with given fields: ID, item
func (_m *UseCase) UpdateCart(ID string, item entity.Items) error {
	ret := _m.Called(ID, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.Items) error); ok {
		r0 = rf(ID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
